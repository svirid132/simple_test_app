{"version":3,"sources":["mode.js","SelectWord/wordMode.js","SelectWord/SelectWord.js","StarSlider/star.svg","StarSlider/SliderElems.js","StarSlider/StarSlider.js","DnDWord/DnDType.js","DnDWord/Observ.js","DnDWord/wordMode.js","DnDWord/DnDWord.js","InputWord/wordMode.js","InputWord/components.js","InputWord/InputWord.js","TaskType.js","Btns.js","App.js","index.js"],"names":["mode","wordMode","Word","styleClass","this","props","className","data-type","onClick","value","CSSTransition","in","unmountOnExit","timeout","id","classNames","Component","SelectWord","selectStar","allStar","data","reduce","accumulator","line","right","length","handleStar","bind","raiting","stars","console","log","onStar","prevProps","map","index","words","LineWords","handleClick","state","selectIds","Array","fill","rightIds","boolId","findIndex","word","setState","update","$splice","Object","assign","_wordMode","React","_extends","target","i","arguments","source","key","prototype","hasOwnProperty","call","apply","_objectWithoutProperties","excluded","sourceKeys","keys","indexOf","_objectWithoutPropertiesLoose","getOwnPropertySymbols","sourceSymbolKeys","propertyIsEnumerable","stroke","strokeWidth","strokeMiterlimit","d","SvgStar","_ref","svgRef","title","titleId","baseProfile","xmlns","xmlnsXlink","x","y","viewBox","overflow","xmlSpace","ref","ForwardRef","Scale","styled","span","width","Star","StarSvg","gold","css","StarSlider","widthScale","progresScale","countStar","fillStar","isGoldStar","appear","DnDType","Observ","name","dropData","dragData","accamulator","concat","sort","item_1","item_2","observ","originDragData","originDropData","type","lineIndex","dragIndex","dropIndex","dragPlace","dropPlace","dragLineIndex","dropLineIndex","dragObj","find","item","dropObj","unshift","singleUpdate","dropItem","obj","dragItem","dragObserv","splice","filter","dropObserv","forEach","wordIndex","checkIndex","beginIndex","lastMode","lineMode","DnDWord","useMemo","useState","useEffect","getStars","reset","solution","dataDropElems","DropLine","beginLine","begin","endLine","end","DndProvider","backend","HTML5Backend","DragLine","setData","setObserv","wordElems","LineIndex","canDrop","dragType","observMove","move","indx","currentWordMode","check","useRef","useDrop","accept","drop","collect","monitor","handlerId","getHandlerId","useDrag","canDrag","drag","Input","input","Raiting","Line","ul","li","getDefaultValue","getDefaultModes","inputData","isArray","InputWord","setChange","wordModes","setWordModes","accum","rightStar","solutionWords","solutionModes","dataElem","WordLine","contine","onChange","text","inputIndex","modes","default","handleChange","event","sliceValue","slice","isNaN","getAttribute","inputElem","data-index","enter","exit","TaskType","Btns","currentMode","onMode","btnsElem","Task","TaskElem","_mode","setMode","setStar","lines","style","position","img","src","alt","task","App","SelectData","DnDData","InputData","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.16e62b6f.chunk.js","sourcesContent":["export const mode = {\r\n    default: 'def',\r\n    check: 'ch',\r\n    solution: 'sol'\r\n}","export const wordMode = {\r\n    unselect: 'un',\r\n    select: 'sel',\r\n    plus: 'p',\r\n    minus: 'm',\r\n    solution: 'sol'\r\n  }","import React, {Component} from 'react';\r\nimport  '../Styles/Word.css';\r\nimport update from 'immutability-helper';\r\nimport { mode } from '../mode';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport {wordMode} from './wordMode'\r\n  \r\nclass Word extends Component {\r\n  \r\n    render() {\r\n  \r\n      let styleClass = 'word';\r\n      let raiting = null;\r\n      switch(this.props.mode) {\r\n        case wordMode.unselect: \r\n          styleClass += ' ' + 'unselect';\r\n          break;\r\n        case wordMode.select: \r\n          styleClass += ' ' + 'select';\r\n          break;\r\n        case wordMode.plus: \r\n          styleClass += ' ' + 'plus';\r\n          break;\r\n        case wordMode.minus: \r\n          styleClass += ' ' + 'minus';\r\n          raiting = <span className='minus'>-1</span>;\r\n          break;\r\n        case wordMode.solution: \r\n          styleClass += ' ' + 'solution';\r\n          break;\r\n      }\r\n\r\n        return (\r\n            <li className={ styleClass } data-type = 'selectWord' onClick={this.props.onClick}>\r\n              {this.props.value}\r\n              <CSSTransition in={this.props.mode === wordMode.plus} unmountOnExit timeout={this.props.id * 200} classNames='raiting'>\r\n                <span className='plus'>{'+1'}</span>\r\n              </CSSTransition>\r\n              <CSSTransition in={this.props.mode === wordMode.minus} unmountOnExit timeout={this.props.id * 200} classNames='raiting'>\r\n                <span className='minus'>{'-1'}</span>\r\n              </CSSTransition>\r\n            </li>\r\n        );\r\n    }\r\n}\r\n\r\n  export default class SelectWord extends Component{\r\n    constructor(props) {\r\n      super(props);\r\n  \r\n      this.selectStar = 0;\r\n  \r\n      this.allStar = this.props.data.reduce((accumulator, line) => line.right.length + accumulator, 0);\r\n      this.handleStar = this.handleStar.bind(this);\r\n    }\r\n  \r\n    handleStar(raiting) {\r\n      this.selectStar += raiting;\r\n      let stars = this.selectStar;\r\n      if (this.selectStar < 0) stars = 0;\r\n      console.log(stars, this.allStar);\r\n      if(this.props.mode === mode.default) this.props.onStar([stars, this.allStar]);\r\n    }\r\n  \r\n    componentDidMount() {\r\n      this.props.onStar([0, this.allStar]);\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n      if (prevProps.mode !== this.props.mode && this.props.mode === mode.default) {\r\n        this.selectStar = 0;\r\n        this.props.onStar([this.selectStar, this.allStar]);\r\n      }\r\n    }\r\n  \r\n    render() {\r\n  \r\n      const linesWords = this.props.data.map((line, index) => {\r\n        return <LineWords key={index}\r\n        words={line.words} \r\n        right={line.right}\r\n        mode={this.props.mode}\r\n        onClick={this.handleStar}\r\n        />\r\n      });\r\n  \r\n      return linesWords;\r\n    }\r\n  }\r\n\r\n  export class LineWords extends React.Component {\r\n      \r\n    constructor(props) {\r\n      super(props);\r\n      this.handleClick = this.handleClick.bind(this);\r\n      this.state = {selectIds: new Array(this.props.words.length).fill(false)};\r\n      this.rightIds = new Array(this.props.words.length).fill(false).map((boolId, index) => {\r\n        return this.props.right.findIndex((word) => word === this.props.words[index]) !== -1;\r\n      });;\r\n    }\r\n  \r\n    handleClick(index) {\r\n\r\n        if (this.props.mode !== mode.default) return;\r\n\r\n        let isSelectId = this.state.selectIds[index];\r\n        if ( isSelectId ) { \r\n          this.setState(update(this.state, {selectIds: {$splice: [[index, 1, false]] }}));\r\n          this.props.onClick(this.rightIds[index] ? -1: +1);\r\n        } else {\r\n          this.setState(update(this.state, {selectIds: {$splice: [[index, 1, true]]}}));\r\n          this.props.onClick(this.rightIds[index] ? +1: -1);\r\n        }\r\n    }\r\n  \r\n    componentDidUpdate(prevProps) {\r\n      if (prevProps.mode !== this.props.mode && this.props.mode === mode.default) {\r\n        this.setState(Object.assign({}, this.state).selectIds.fill(false));\r\n      }\r\n    }\r\n\r\n    render() {\r\n      const words = this.props.words.map((word, index) => {\r\n\r\n        let _wordMode;\r\n        if (this.props.mode === mode.default) {\r\n          _wordMode = this.state.selectIds[index] ? wordMode.select : wordMode.unselect;\r\n        } else if (this.props.mode === mode.solution) {\r\n          _wordMode = this.rightIds[index] ? wordMode.solution : wordMode.unselect;\r\n        } else if (this.props.mode === mode.check) {\r\n          _wordMode = this.state.selectIds[index] ? \r\n            (this.rightIds[index] ? wordMode.plus : wordMode.minus) : \r\n            wordMode.unselect;\r\n        }\r\n        \r\n        return (\r\n            <Word key ={index} \r\n            id = {index}\r\n            value={word} \r\n            mode={_wordMode} \r\n            onClick={() => this.handleClick(index)} />\r\n        );\r\n      });\r\n\r\n      return (\r\n        <ul className=\"lineWord\">\r\n          { words }\r\n        </ul>\r\n      );\r\n    }\r\n  }","function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport * as React from \"react\";\n\nvar _ref2 = /*#__PURE__*/React.createElement(\"path\", {\n  fill: \"#878787\",\n  stroke: \"#FFFFFF\",\n  strokeWidth: 4.0016,\n  strokeMiterlimit: 10,\n  d: \"M27.1,3.8l5.1,10.9c0.3,0.7,1,1.2,1.7,1.3 l11.6,1.8c1.8,0.3,2.6,2.5,1.3,3.9l-8.6,8.8c-0.5,0.5-0.7,1.3-0.6,2l2,12.3c0.3,1.9-1.7,3.3-3.4,2.4l-10.2-5.7 c-0.7-0.4-1.5-0.4-2.2,0l-10.2,5.7c-1.7,0.9-3.7-0.5-3.4-2.4l2-12.3c0.1-0.7-0.1-1.5-0.6-2l-8.6-8.8c-1.3-1.3-0.5-3.6,1.3-3.9 l11.6-1.8c0.8-0.1,1.4-0.6,1.7-1.3l5.1-10.9C23.7,2.1,26.3,2.1,27.1,3.8z\"\n});\n\nfunction SvgStar(_ref, svgRef) {\n  var title = _ref.title,\n      titleId = _ref.titleId,\n      props = _objectWithoutProperties(_ref, [\"title\", \"titleId\"]);\n\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    baseProfile: \"tiny\",\n    id: \"Layer_1\",\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    x: \"0px\",\n    y: \"0px\",\n    viewBox: \"0 0 50 50\",\n    overflow: \"visible\",\n    xmlSpace: \"preserve\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _ref2);\n}\n\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgStar);\nexport default __webpack_public_path__ + \"static/media/star.205e811b.svg\";\nexport { ForwardRef as ReactComponent };","import styled, { css } from 'styled-components'\r\nimport {ReactComponent as StarSvg} from './star.svg';\r\n\r\nexport const Scale = styled.span`\r\n    height: 15px;\r\n    position: absolute;\r\n    background-color: #DDDDDD;\r\n    border-radius: 5px;\r\n    top: 11px;\r\n    left: 25px;\r\n    width: 220px;\r\n    \r\n    &::before {\r\n        content: \"\";\r\n        height: inherit;\r\n        border-radius: 5px;\r\n        background-color: green;\r\n        position: absolute;\r\n        width: ${(props) => props.width}px;\r\n        transition: width 2s ease-out;\r\n    }\r\n\r\n    &.sliderBar-appear {\r\n        &::before {\r\n            width: 0px;\r\n        }\r\n    }\r\n`\r\n\r\nexport const Star = styled(StarSvg)`\r\n    width: 38px;\r\n    height: 30px;\r\n    position: absolute;\r\n    left: 220px;\r\n    top: 2px;\r\n\r\n    path {\r\n        fill: #DDDDDD;\r\n        stroke-width: 5px;\r\n        ${props => props.gold && css` transition: fill 0s 1.6s; fill: gold;`}\r\n    }\r\n\r\n    &.star-appear {\r\n        path {\r\n            fill: #DDDDDD;\r\n            stroke-width: 5px;\r\n        }\r\n    }\r\n`","import React from \"react\";\r\n\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nimport {Scale, Star} from './SliderElems'\r\n\r\nimport './StarSlider.scss'\r\n\r\n\r\nclass StarSlider extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props); \r\n\r\n        this.widthScale = 220;\r\n    }\r\n\r\n    componentDidMount() {\r\n    }\r\n\r\n    render() {\r\n\r\n        const progresScale = this.widthScale / this.props.countStar * this.props.fillStar;\r\n        const isGoldStar = (this.props.countStar === this.props.fillStar);\r\n\r\n        return (\r\n                <div className=\"starSlider\">\r\n                    <div className=\"border\">\r\n                    <CSSTransition in={true} appear timeout={200} classNames='sliderBar'>\r\n                        <Scale width={progresScale}/>\r\n                    </CSSTransition>\r\n                    <CSSTransition in={true} appear timeout={200} classNames='star'>\r\n                        {isGoldStar ? <Star gold/> : <Star />}\r\n                    </CSSTransition>\r\n                    <span className=\"counter\">{this.props.fillStar}<span className=\"seperate\">/</span>{this.props.countStar}</span>\r\n                    </div>\r\n                </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default StarSlider;","export const DnDType = {\r\n    drag: 'drag',\r\n    drop: 'drop'\r\n}","import {DnDType} from './DnDType'\r\n\r\nexport class Observ {\r\n    constructor(data, name) {\r\n        this.dropData = data.map((line) => (\r\n                            line.words.map((word, index) => ({index: -index - 1, word: ''}))));\r\n                            // .reduce((accamulator, line) => accamulator.concat(line), []);\r\n        \r\n\r\n        let index = 0;\r\n        this.dragData = data.map((line) => (\r\n            line.words.map((word) => ({index: index++, word: word})))\r\n        ).reduce((accamulator, line) => accamulator.concat(line), []);\r\n\r\n        this.dragData.sort((item_1, item_2) => {\r\n            if(item_1.word[0] < item_2.word[0]) {\r\n                console.log('1');\r\n                return 1;\r\n            } else if(item_1.word[0] > item_2.word[0]) {\r\n                console.log('-1');\r\n                return -1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        });\r\n\r\n        console.log(this.dragData);\r\n\r\n        this.observ = {};\r\n        this.observ[DnDType.drop] = {};    \r\n\r\n        this.originDragData = Object.assign([], this.dragData);\r\n        this.originDropData = Object.assign([], this.dropData);\r\n\r\n        this.data = data;\r\n\r\n        this.name = name;\r\n    }\r\n\r\n    setObserv(observ, type, lineIndex = null) {\r\n        if (lineIndex === null) {\r\n            this.observ[type] = observ;\r\n        } else {\r\n            this.observ[type][lineIndex] = observ;\r\n        }\r\n    }\r\n\r\n    canDrop(dragIndex, dropIndex, dragPlace, dropPlace, dragLineIndex, dropLineIndex) {\r\n        return !(dragIndex === dropIndex && \r\n            dragPlace === dropPlace &&\r\n            dragLineIndex === dropLineIndex);\r\n    }\r\n    \r\n    move(dragIndex, dropIndex, dragPlace, dropPlace, dragLineIndex, dropLineIndex) {\r\n\r\n        let update;\r\n\r\n        if (dragPlace === dropPlace) {\r\n            if (dragPlace === DnDType.drop) {\r\n                const dragObj = Object.assign({} ,this.dropData[dragLineIndex].find((item) => {\r\n                    return item.index === dragIndex;\r\n                }));\r\n                const dropObj = Object.assign({} ,this.dropData[dropLineIndex].find((item) =>{\r\n                    return item.index === dropIndex;\r\n                }));\r\n                this.dropData[dragLineIndex] = this.dropData[dragLineIndex].map((item, index) => {\r\n                    if (item.index === dragIndex){\r\n                         return {index: -index - 1, word: ''};\r\n                    }\r\n                    return item;\r\n                });\r\n                this.dropData[dropLineIndex] = this.dropData[dropLineIndex].map((item) => {\r\n                    if (item.index === dropIndex) {\r\n                        return dragObj;\r\n                    }\r\n                    return item;\r\n                });\r\n                if (dropObj.word !== ''){\r\n                    this.dragData.unshift(dropObj);\r\n                    this.singleUpdate( this.dragData, this.observ[DnDType.drag]);\r\n                }\r\n                this.update( this.dropData[dragLineIndex], this.observ[DnDType.drop][dragLineIndex],  this.dropData[dropLineIndex], this.observ[DnDType.drop][dropLineIndex]);\r\n            } else {\r\n                const dragObj = Object.assign({} ,this.dragData.find((item) => item.index === dragIndex));\r\n                const dropObj = Object.assign({} ,this.dragData.find((item) => item.index === dropIndex));\r\n                this.dragData = this.dragData.map((item) => {\r\n                    if (item.index === dropIndex) return dragObj;\r\n                    if (item.index === dragIndex) return dropObj;\r\n                    return item;\r\n                });\r\n                this.singleUpdate(this.dragData, this.observ[DnDType.drag]);\r\n            }\r\n        } else {\r\n            if (dropPlace === DnDType.drop) {\r\n                if (this.dropData[dropLineIndex].find((item) => item.index === dropIndex).word !== '') {\r\n                    const dropItem = Object.assign({}, this.dropData[dropLineIndex].find((obj) => obj.index === dropIndex));\r\n                    this.dragData.unshift(dropItem);\r\n                };\r\n                const dragItem = this.dragData.find((obj) => obj.index === dragIndex);\r\n                this.dropData[dropLineIndex] = this.dropData[dropLineIndex].map(item => {\r\n                    if (dropIndex === item.index) {\r\n                        return Object.assign([], dragItem);\r\n                    }\r\n                    return item;\r\n                });\r\n                update = (dragData, dragObserv) => (\r\n                    this.update(dragData, dragObserv, this.dropData[dropLineIndex], this.observ[DnDType.drop][dropLineIndex])\r\n                );\r\n            } else {\r\n                this.dragData.splice(this.dragData.findIndex((item) => item.index === dropIndex), 0, this.dropData[dragLineIndex].find((item) => item.index === dragIndex)); \r\n                update = (dragData, dragObserv) => (\r\n                    this.update(dragData, dragObserv, this.dragData, this.observ[DnDType.drag])\r\n                );\r\n            }\r\n\r\n            if (dragPlace === DnDType.drag) {\r\n                this.dragData = this.dragData.filter((obj) => obj.index !== dragIndex);\r\n                update(this.dragData, this.observ[DnDType.drag]); \r\n            } else {\r\n                this.dropData[dragLineIndex] = this.dropData[dragLineIndex].map((item, index) => {\r\n                    if (item.index === dragIndex) {\r\n                        return {index: -index - 1, word: ''};\r\n                    }\r\n                    return item;\r\n                });\r\n                update(this.dropData[dragLineIndex], this.observ[DnDType.drop][dragLineIndex]);\r\n            }\r\n        }\r\n    }\r\n\r\n    singleUpdate(data, observ){\r\n        observ(Object.assign([], data));\r\n    }\r\n    \r\n    update(dragData, dragObserv, dropData, dropObserv) {\r\n        dragObserv(Object.assign([], dragData));\r\n        dropObserv(Object.assign([], dropData));\r\n    }\r\n\r\n    getStars() {\r\n        let stars = 0;\r\n        let index = 0;\r\n        this.dropData.forEach((line) => {\r\n            for (let i = 0; i < line.length; ++i) {\r\n                if (line[i].index === index) ++stars;\r\n                ++index;\r\n            }\r\n        });\r\n        return stars;\r\n    }\r\n\r\n    solution() {\r\n        let index = 0;\r\n        this.dropData = this.data.map((line) => (line.words.map((word) => ({index: index++, word}))));\r\n        for (let i = 0; i < this.dropData.length; ++i) {\r\n            this.singleUpdate(this.dropData[i], this.observ[DnDType.drop][i]);\r\n        }\r\n        this.dragData = [];\r\n        this.singleUpdate(this.dragData, this.observ[DnDType.drag]);\r\n    }\r\n\r\n    reset() {\r\n        this.dropData = this.data.map((line) => (\r\n            line.words.map((word, index) => ({index: -index - 1, word: ''}))));\r\n            // .reduce((accamulator, line) => accamulator.concat(line), []);\r\n\r\n\r\n        let index = 0;\r\n        this.dragData = this.data.map((line) => (\r\n        line.words.map((word) => ({index: index++, word: word})))\r\n        ).reduce((accamulator, line) => accamulator.concat(line), []).sort((item_1, item_2) => item_1.word[0] > item_2.word[0]);\r\n\r\n        this.dragData.sort((item_1, item_2) => {\r\n            if(item_1.word[0] < item_2.word[0]) {\r\n                console.log('1');\r\n                return 1;\r\n            } else if(item_1.word[0] > item_2.word[0]) {\r\n                console.log('-1');\r\n                return -1;\r\n            } else {\r\n                return 0;\r\n            }\r\n        });\r\n\r\n        for (let i = 0; i < this.dropData.length; ++i) {\r\n            this.singleUpdate(this.dropData[i], this.observ[DnDType.drop][i]);\r\n        }\r\n        this.singleUpdate(this.dragData, this.observ[DnDType.drag]);\r\n    }\r\n\r\n    check(lineIndex, wordIndex, checkIndex){\r\n        let beginIndex = 0;\r\n        for (let i = 0; i < lineIndex; ++i) {\r\n            beginIndex += this.data[i].words.length;\r\n        }\r\n        const rigthIndex = beginIndex + wordIndex;\r\n        return checkIndex === rigthIndex;\r\n    }\r\n}","export const wordMode = {\r\n    default: 'def',\r\n    plus: 'p',\r\n    minus: 'm',\r\n    solution: 'sol'\r\n  }","import React, {useState, useMemo, useEffect, useRef} from 'react';\r\nimport { mode as lineMode } from '../mode';\r\nimport { DndProvider } from 'react-dnd';\r\nimport { HTML5Backend } from 'react-dnd-html5-backend';\r\nimport { useDrop, useDrag } from 'react-dnd';\r\nimport { Observ } from './Observ';\r\nimport {DnDType} from './DnDType';\r\nimport {wordMode} from './wordMode'\r\nimport '../Styles/Word.css';\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nlet lastMode = lineMode.default;\r\n\r\nexport default function DnDWord({data, mode, onStar}) {\r\n    const allStar = useMemo(() => data.reduce((accumulator, line) => line.words.length + accumulator, 0), []);\r\n    const [observ, setObserv] = useState(new Observ(data, 'current'));\r\n    useEffect(() => {\r\n      if (mode === lineMode.check && lastMode !== mode) {\r\n        let stars = observ.getStars();\r\n        onStar([stars, allStar]);\r\n      } else if (mode === lineMode.default && lastMode !== mode) {\r\n        observ.reset();\r\n      } else if(mode === lineMode.solution && lastMode !== mode) {\r\n        observ.solution();\r\n      }\r\n      lastMode = mode;\r\n    }, [mode]);\r\n\r\n    const dataDropElems = data.map((line, index) => {\r\n        return <DropLine key={index}\r\n        index={index}\r\n        beginLine = {line.begin}\r\n        endLine = {line.end}\r\n        observ={observ} \r\n        mode={mode}\r\n        />\r\n    });\r\n\r\n    return (\r\n    <DndProvider backend={HTML5Backend}>\r\n        {dataDropElems}\r\n        <DragLine observ={observ} mode={mode}/>\r\n    </DndProvider>\r\n    );\r\n}\r\n\r\nfunction DragLine({observ, mode}) {\r\n\r\n  const [data, setData] = useState(observ.dragData);\r\n\r\n\r\n  useEffect(() => {\r\n    observ.setObserv(setData, DnDType.drag);\r\n  }, [observ]);\r\n\r\n    const wordElems = data.map((obj) =>( \r\n    <Word key={obj.index} \r\n    dragItem={{index: obj.index, type: DnDType.drag, LineIndex: null}} \r\n    index={obj.index} \r\n    word={obj.word} \r\n    type={null} \r\n    canDrop={(dragIndex, dragType, dragLineIndex) => (\r\n      observ.canDrop(dragIndex, obj.index, dragType, DnDType.drag, dragLineIndex, null)\r\n    )}\r\n    observMove={(dragIndex, dragType, dragLineIndex) => (\r\n      observ.move(dragIndex, obj.index, dragType, DnDType.drag, dragLineIndex, null)\r\n    )}/>));\r\n\r\n    return (\r\n    <ul className='line' data-type='drag'>\r\n      { wordElems }\r\n    </ul>);\r\n\r\n}\r\n\r\nfunction DropLine({index, beginLine, endLine, observ, mode}) {\r\n\r\n    const [data, setData] = useState(observ.dropData[index]);\r\n\r\n    useEffect(() => {\r\n      observ.setObserv(setData, DnDType.drop, index);\r\n    }, [observ]);\r\n\r\n    const wordElems = data.map((obj, indx) => {\r\n      \r\n      let currentWordMode;\r\n      switch(mode){\r\n        case lineMode.default: \r\n          currentWordMode = wordMode.default;\r\n          break;\r\n        case lineMode.check:\r\n          if(observ.check(index, indx, obj.index)) {\r\n            currentWordMode = wordMode.plus;\r\n          } else {\r\n            currentWordMode = wordMode.minus;\r\n          }\r\n          break;\r\n        case lineMode.solution:\r\n          currentWordMode = wordMode.solution;\r\n          break;\r\n      }\r\n\r\n      return (<Word key={obj.index} \r\n      dragItem={{index: obj.index, type: DnDType.drop, LineIndex: index}} \r\n      word={obj.word}\r\n      canDrop={(dragIndex, dragType, dragLineIndex) => (\r\n        observ.canDrop(dragIndex, obj.index, dragType, DnDType.drop, dragLineIndex, index)\r\n      )}\r\n      observMove={(dragIndex, dragType, dragLineIndex) => (\r\n        observ.move(dragIndex, obj.index, dragType, DnDType.drop, dragLineIndex, index)\r\n      )}\r\n    mode = {currentWordMode}/>)});\r\n\r\n    return (\r\n      <ul className=\"line\" data-type='drop'>\r\n        {beginLine && <li className='word' data-type='default'>{beginLine}</li>}\r\n        {wordElems}\r\n        {endLine && <li className='word' data-type='default'>{endLine}</li>}\r\n      </ul>\r\n    );\r\n}\r\n\r\nfunction Word({dragItem, word, observMove, canDrop, mode}) {\r\n\r\n  const ref = useRef(null);\r\n\r\n  const [{ handlerId }, drop] = useDrop(() => ({\r\n    accept: 'word',\r\n    canDrop: (dragItem) => canDrop(dragItem.index, dragItem.type, dragItem.LineIndex),\r\n    drop: (dragItem) => observMove(dragItem.index, dragItem.type, dragItem.LineIndex),\r\n    collect(monitor) {\r\n      return {\r\n          handlerId: monitor.getHandlerId(),\r\n      };\r\n    },\r\n  }), []);\r\n\r\n  const [{},drag] = useDrag(() => ({\r\n    type: 'word',\r\n    canDrag: () => word !== '',\r\n    item: dragItem,\r\n  }), []);\r\n\r\n  drag(drop(ref));\r\n\r\n  let styleClass = 'word';\r\n  switch(mode) {\r\n    case wordMode.plus: \r\n      styleClass += ' ' + 'plus';\r\n      break;\r\n    case wordMode.minus: \r\n      styleClass += ' ' + 'minus';\r\n      break;\r\n    case wordMode.solution: \r\n      styleClass += ' ' + 'solution';\r\n      break;\r\n  }\r\n\r\n  return (<li className={styleClass} data-type='DnDWord' ref={ref}>{word}\r\n    <CSSTransition in={mode === wordMode.plus} unmountOnExit timeout={200} classNames='raiting'>\r\n      <span className='plus'>{'+1'}</span>\r\n    </CSSTransition>\r\n    <CSSTransition in={mode === wordMode.minus} unmountOnExit timeout={200} classNames='raiting'>\r\n        <span className='minus'>{'-1'}</span>\r\n    </CSSTransition>\r\n      </li>)\r\n}","export const wordMode = {\r\n    default: 'def',\r\n    plus: 'pl',\r\n    minus: 'min',\r\n    solution: 'sol'\r\n}","import styled, { css } from 'styled-components'\r\nimport {wordMode} from './wordMode'\r\n\r\nexport const Input = styled.input`\r\n    width: 50px;\r\n    ${props => (\r\n        props.mode === wordMode.minus &&\r\n        css`\r\n            background-color: rgb(231, 15, 15);`)\r\n    };\r\n    ${props => (\r\n        props.mode === wordMode.plus &&\r\n        css`\r\n            background-color: rgb(58, 187, 47);`)\r\n    };\r\n    ${props => (\r\n        props.mode === wordMode.solution &&\r\n        css`\r\n            background-color: rgb(77, 216, 209);\r\n            border: 2px dotted rgb(58, 83, 20);\r\n            text-align: center;`\r\n    )};\r\n`\r\n\r\nexport const Raiting = styled.span`\r\n        position: relative;\r\n        display: inline-block;\r\n        top: -10px;\r\n        right: 10px;\r\n        font-size: 1.2rem;\r\n        text-align: center;\r\n        width: 2rem;\r\n        border-radius: 5px;\r\n\r\n        ${props => (\r\n            props.mode === wordMode.plus && \r\n            css`\r\n                background-color: rgb(33, 190, 33);\r\n                border: 0.2rem solid #146822;\r\n            `\r\n        )};\r\n        ${props => (\r\n            props.mode === wordMode.minus && \r\n            css`\r\n                background-color: #ff453e;\r\n                border: 0.2rem solid #d6302a;`\r\n        )};\r\n\r\n        &.transition-enter {\r\n            opacity: 0%;\r\n        }\r\n        &.transition-enter-active {\r\n            opacity: 100%;\r\n            transition: opacity 200ms ${props => css`${props.index * 200}ms`};\r\n        }\r\n`\r\n\r\nexport const Line = styled.ul`\r\n    margin: 0;\r\n    padding: 0;\r\n`\r\n\r\nexport const Word = styled.li`\r\n    display: inline-block;\r\n    margin-right: 10px;\r\n    margin-bottom: 5px; \r\n    list-style-type: none;\r\n`","import {useEffect, useState} from \"react\";\r\nimport {mode as lineMode} from '../mode'\r\nimport {wordMode} from './wordMode'\r\nimport {Input, Line, Word, Raiting} from './components'\r\nimport { CSSTransition } from 'react-transition-group';\r\n\r\nlet lastMode = lineMode.default;\r\n\r\nfunction getDefaultValue(data) {\r\n    return (data.map((line) => {\r\n        if (line.words){\r\n            return Array(line.words.length).fill('');\r\n        } else {\r\n            return null;\r\n        }\r\n    }));\r\n}\r\n\r\nfunction getDefaultModes(inputData) {\r\n    return (inputData.map((line)=>{\r\n        if(Array.isArray(line)) return Object.assign([], line).fill(wordMode.default);\r\n        return null;\r\n    }));\r\n}\r\n\r\nexport default function InputWord({data, mode, onStar}) {\r\n\r\n    const [inputData, setChange] = useState(getDefaultValue(data));\r\n    const [wordModes, setWordModes] = useState(getDefaultModes(inputData));\r\n\r\n    useEffect(() => {\r\n        if (mode === lineMode.check && lastMode !== lineMode.check) {\r\n            const allStar = data.reduce((accum, line) => {\r\n                if(line.words){\r\n                    accum+=line.words.length;\r\n                }\r\n                return accum;\r\n            }, 0);\r\n            const rightStar = data.reduce((accum, line, lineIndex) => {\r\n                if (line.words) {\r\n                    accum += line.words.reduce((accum, word, wordIndex) => (inputData[lineIndex][wordIndex] === word ? accum += 1 : accum), 0);\r\n                }\r\n                return accum;\r\n            }, 0);\r\n            onStar([rightStar, allStar]);\r\n\r\n            const wordModes = data.map((line, lineIndex) => {\r\n                if (line.words) {\r\n                    return line.words.map((word, wordIndex) => (inputData[lineIndex][wordIndex] === word ? wordMode.plus : wordMode.minus));\r\n                }\r\n                return null;\r\n            });\r\n            setWordModes(wordModes);\r\n        } else if (mode === lineMode.solution && lastMode !== lineMode.solution) {\r\n            const solutionWords = data.map((line) => {\r\n                if (line.words){\r\n                    return Object.assign([], line.words);\r\n                } else {\r\n                    return null;\r\n                }\r\n            });\r\n            setChange(solutionWords);\r\n\r\n            const solutionModes = inputData.map((line)=>{\r\n                if(Array.isArray(line)) return Object.assign([], line).fill(wordMode.solution);\r\n                return null;\r\n            });\r\n            setWordModes(solutionModes);\r\n        } else if (mode === lineMode.default && lastMode !== lineMode.default){\r\n            setChange(getDefaultValue(data));\r\n            setWordModes(getDefaultModes(inputData));\r\n        }\r\n        lastMode = mode;\r\n    }, [mode]); \r\n\r\n    const dataElem = data.map((line, index) => {\r\n        if(line.words){\r\n            return <WordLine \r\n                key={index} \r\n                index={index}\r\n                begin={line.begin} \r\n                end={line.end} \r\n                contine={line.contine}\r\n                inputData={inputData[index]}\r\n                onChange={(text, inputIndex) => {\r\n                    const obj = Object.assign([], inputData);\r\n                    obj[index][inputIndex] = text;\r\n                    setChange(obj);\r\n                }\r\n                }\r\n                modes={wordModes[index]}/>;\r\n        } else {\r\n            return <Line><Word key={index}>{line.default}</Word></Line>;\r\n        }\r\n    });\r\n\r\n    return (\r\n        <>\r\n            {dataElem}\r\n        </>\r\n    );\r\n}\r\n\r\nfunction WordLine({index, begin, end, contine, inputData, onChange, modes}) {\r\n\r\n    const lineIndex = index;\r\n\r\n    let handleChange = (event) => {\r\n\r\n        if(modes[0] !== lineMode.default) return;\r\n\r\n        const sliceValue = event.target.value.slice(-1);\r\n        if(!isNaN(sliceValue) && (sliceValue !== '')) return;\r\n\r\n        const text = event.target.value;\r\n        const index = event.target.getAttribute(\"data-index\");\r\n        onChange(text, index);\r\n    }; \r\n\r\n    const inputElem = inputData.map((data, index) => (<Word>\r\n            <Input type='text' mode={modes[index]} data-index={index} value={data} onChange={handleChange}/>\r\n                {<CSSTransition in={modes[index] === wordMode.plus || modes[index] === wordMode.minus} unmountOnExit timeout={{enter: 500 * lineIndex, exit: 0}} classNames='transition'>\r\n                    <Raiting index = {lineIndex} mode={modes[index]}>{modes[index] === wordMode.plus ? '+1' : '-1'}</Raiting>\r\n                </CSSTransition>}\r\n             </Word>));\r\n\r\n    return (\r\n        <ul>\r\n            <Word key={0}>{begin}</Word>\r\n            {inputElem[0]}\r\n            {contine &&     \r\n                <>\r\n                    <Word key={2}>{contine}</Word>\r\n                    {inputElem[1]}\r\n                </>}\r\n            <Word key={4}>{end}</Word>\r\n        </ul>\r\n    );\r\n}","export const TaskType = {\r\n    select: 'sel',\r\n    dnd: 'dnd',\r\n    input: 'inp'\r\n}","import {mode} from './mode'\r\n\r\nexport function Btns({currentMode, onMode}) {\r\n\r\n    let btnsElem = null;\r\n\r\n    switch(currentMode) {\r\n      case mode.default:\r\n        btnsElem = <button name='check' onClick={() => onMode(mode.check)}>check</button>        \r\n        break;\r\n      case mode.check:\r\n        btnsElem = (\r\n        <ul className='btns'>\r\n            <li key={0}><button name='reset' onClick={() => onMode(mode.default)}>reset</button></li>\r\n            <li key={1}><button name='solution' onClick={() => onMode(mode.solution)}>solution</button></li>\r\n        </ul>);\r\n        break;\r\n      case mode.solution:\r\n        btnsElem = <button name='reset' onClick={() => onMode(mode.default)}>reset</button>      \r\n        break;\r\n    }\r\n\r\n    return btnsElem;\r\n}","import './App.css';\r\n\r\nimport SelectWord from './SelectWord/SelectWord.js'\r\nimport StarSlider from './StarSlider/StarSlider'\r\nimport SelectData from \"./Data/SelectData.json\";\r\n\r\nimport DnDWord from './DnDWord/DnDWord.js'\r\nimport DnDData from './Data/DnDData.json'\r\n\r\nimport InputWord from './InputWord/InputWord.js'\r\nimport InputData from './Data/InputData.json'\r\n\r\nimport React, {useState} from 'react';\r\nimport {TaskType} from './TaskType';\r\nimport {Btns} from './Btns.js';\r\nimport {mode} from './mode'\r\n\r\nfunction Task({type, data}){\r\n\r\n  const [_mode, setMode] = useState(mode.default);\r\n  const [[fillStar, countStar], setStar] = useState([5, 10]);\r\n\r\n  let TaskElem;\r\n  switch(type) {\r\n    case TaskType.select:\r\n       TaskElem = <SelectWord data={data.lines} mode={_mode} onStar={setStar}/>;\r\n       break;\r\n    case TaskType.dnd: \r\n      TaskElem = <DnDWord data={data.lines} mode={_mode} onStar={setStar}/>;\r\n      break;\r\n    case TaskType.input:\r\n      TaskElem = <InputWord data={data.lines} mode={_mode} onStar={setStar}/>;\r\n      break;\r\n    default:\r\n      TaskElem = null;\r\n  }\r\n\r\n  return (\r\n    <div className={\"task\"} style={{position: 'relative'}}>\r\n      <h2>{data.name}</h2>\r\n      {data.img && <img src={data.img} alt='optional picture'></img>}\r\n      <p>{data.task}</p>\r\n      {TaskElem}\r\n      <Btns currentMode={_mode} onMode={setMode}/>\r\n      {_mode !== mode.default && <StarSlider fillStar = {fillStar} countStar = {countStar}/>}\r\n    </div>\r\n    );\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <header>\r\n        <h1>\r\n          Test<span>English</span>\r\n        </h1>\r\n      </header>\r\n      <Task type={TaskType.select} data={SelectData}/>\r\n      <Task type={TaskType.dnd} data={DnDData}/>\r\n      <Task type={TaskType.input} data={InputData}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}